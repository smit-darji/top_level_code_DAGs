name: Top-Level Code Check

on:
  pull_request:
    branches:
      - Master


jobs:
  addedFilesList: # Job that list changed files
    runs-on: ubuntu-latest
    outputs:
      addedfiles: ${{ steps.set-added-files.outputs.addedfiles }} # generate output names addedfiles by using inner step output
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4

      - name: Get main branch
        run: git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
      
      - name: Get list of Added files
        id: set-added-files
        run: echo addedfiles=$(git diff --name-only --diff-filter=ACRT origin/${{ github.event.pull_request.base.ref }} HEAD | uniq  | jq -R -s -c 'split("\n")[:-1]' | jq -r '.[] | ("./" + .)') >>$GITHUB_OUTPUT
      
      - name: Print files to be validated
        run: |
          echo "Files to be validated: ${{ steps.set-added-files.outputs.addedfiles }}"

  analyze_dag_files:
    runs-on: ubuntu-latest
    needs: addedFilesList
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Print File Names
        env:
          addedfiles: ${{ needs.addedFilesList.outputs.addedfiles }}
        run: |
          added_files_str="${{ env.addedfiles }}"
          files=($added_files_str)
          for file in "${files[@]}"; do
            echo "Processing file: $file"
            python analyze_dags.py "$file"
          done
  
  result_of_pythonfile:
    needs: analyze_dag_files
    runs-on: ubuntu-latest
    steps:
      - name: Print result of Python file
        run: |
          # Add commands to print the result of the Python file processing here
          # For example:
          echo "Result of Python file processing:"
          cat analyze_result.txt  # Assuming the Python script writes the result to a file named analyze_result.txt